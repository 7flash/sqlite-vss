name: "Release"
on:
  release:
    types: [published]
  workflow_dispatch:
permissions:
  contents: read
env:
  ARTIFACT-LINUX-X86_64-EXTENSION: sqlite-vss-linux-x86_64
  ARTIFACT-MACOS-X86_64-EXTENSION: sqlite-vss-macos-x86_64
  ARTIFACT-MACOS-AARCH64-EXTENSION: sqlite-vss-macos-aarch64
  ARTIFACT-WINDOWS-X86_64-EXTENSION: sqlite-vss-windows-x86_64
  ARTIFACT-LINUX-X86_64-WHEELS: sqlite-vss-linux-x86_64-wheels
  ARTIFACT-MACOS-X86_64-WHEELS: sqlite-vss-macos-x86_64-wheels
  ARTIFACT-MACOS-AARCH64-WHEELS: sqlite-vss-macos-aarch64-wheels
jobs:
  build-linux-x86_64-extension:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - id: cache-sqlite-build
        uses: actions/cache@v3
        with:
          path: vendor/sqlite
          key: ${{ runner.os }}-${{ hashFiles('vendor/get_sqlite.sh') }}
      - if: steps.cache-sqlite-build.outputs.cache-hit != 'true'
        run: ./vendor/get_sqlite.sh
      - if: steps.cache-sqlite-build.outputs.cache-hit != 'true'
        working-directory: vendor/sqlite
        run: ./configure && make

      # TODO how cache this?
      - run: sudo apt-get install -y cmake libgomp1
      - run: make loadable-release
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT-LINUX-X86_64-EXTENSION }}
          path: dist/release/*.so
  build-linux-x86_64-python:
    runs-on: ubuntu-20.04
    needs: [build-linux-x86_64-extension]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT-LINUX-X86_64-EXTENSION }}
          path: dist/release/
      - uses: actions/setup-python@v3
      - run: pip install wheel
      - run: make python-release
      - run: make datasette-release
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT-LINUX-X86_64-WHEELS }}
          path: dist/release/wheels/*.whl
  build-macos-x86_64-extension:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - id: cache-sqlite-build
        uses: actions/cache@v3
        with:
          path: vendor/sqlite
          key: ${{ runner.os }}-${{ hashFiles('vendor/get_sqlite.sh') }}
      - if: steps.cache-sqlite-build.outputs.cache-hit != 'true'
        run: ./vendor/get_sqlite.sh
      - if: steps.cache-sqlite-build.outputs.cache-hit != 'true'
        working-directory: vendor/sqlite
        run: ./configure && make
      - run: brew install llvm
      - id: cache-cmake-build
        uses: actions/cache@v3
        with:
          path: build
          key: ${{ runner.os }}-build
      - run: make loadable-release
        env:
          # https://stackoverflow.com/questions/48825416/missing-openmp-c-flags-openmp-c-lib-names
          CC: /usr/local/opt/llvm/bin/clang
          CXX: /usr/local/opt/llvm/bin/clang++
          LDFLAGS: "-L/usr/local/opt/llvm/lib"
          CPPFLAGS: "-I/usr/local/opt/llvm/include"
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT-MACOS-X86_64-EXTENSION }}
          path: dist/release/*.dylib
  build-macos-x86_64-python:
    runs-on: macos-latest
    needs: [build-macos-x86_64-extension]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT-MACOS-X86_64-EXTENSION }}
          path: dist/release/
      - uses: actions/setup-python@v3
      - run: pip install wheel
      - run: make python-release
      - run: make datasette-release
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT-MACOS-X86_64-WHEELS }}
          path: dist/release/wheels/*.whl
  build-macos-aarch64-extension:
    runs-on: [self-hosted, mm1]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
      - id: cache-sqlite-build
        uses: actions/cache@v3
        with:
          path: vendor/sqlite
          key: ${{ runner.os }}-${{ hashFiles('vendor/get_sqlite.sh') }}
      - if: steps.cache-sqlite-build.outputs.cache-hit != 'true'
        run: ./vendor/get_sqlite.sh
      - if: steps.cache-sqlite-build.outputs.cache-hit != 'true'
        working-directory: vendor/sqlite
        run: ./configure && make
      - run: make loadable-release
        env:
          CC: /opt/homebrew/opt/llvm/bin/clang
          CXX: /opt/homebrew/opt/llvm/bin/clang++
          LDFLAGS: "-L/opt/homebrew/opt/llvm/lib"
          CPPFLAGS: "-I/opt/homebrew/opt/llvm/include"
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT-MACOS-AARCH64-EXTENSION }}
          path: dist/release/*
  build-macos-aarch64-python:
    runs-on: [self-hosted, mm1]
    needs: [build-macos-aarch64-extension]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT-MACOS-AARCH64-EXTENSION }}
          path: dist/release/
      - run: pip3 install wheel
      - run: make python-release IS_MACOS_ARM=1
      - run: make datasette-release
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT-MACOS-AARCH64-WHEELS }}
          path: dist/release/wheels/*.whl
  upload-release-assets:
    needs:
      [
        build-macos-x86_64-extension,
        build-macos-aarch64-extension,
        build-linux-x86_64-extension,
      ]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
      - run: npm install tar-fs
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const script = require('.github/workflows/upload.js')
            await script({github, context})
  upload-deno:
    name: Upload Deno release assets
    needs:
      [
        build-macos-x86_64-extension,
        build-macos-aarch64-extension,
        build-linux-x86_64-extension,
      ]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v2
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const script = require('.github/workflows/upload-deno-assets.js')
            await script({github, context})
  upload-npm:
    needs:
      [
        build-macos-x86_64-extension,
        build-macos-aarch64-extension,
        build-linux-x86_64-extension,
      ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v2
      - run: |
          cp ${{ env.ARTIFACT-LINUX-X86_64-EXTENSION }}/vector0.so npm/sqlite-vss-linux-x64/lib/vector0.so
          cp ${{ env.ARTIFACT-LINUX-X86_64-EXTENSION }}/vss0.so npm/sqlite-vss-linux-x64/lib/vss0.so

          cp ${{ env.ARTIFACT-MACOS-X86_64-EXTENSION }}/vector0.dylib npm/sqlite-vss-darwin-x64/lib/vector0.dylib
          cp ${{ env.ARTIFACT-MACOS-X86_64-EXTENSION }}/vss0.dylib npm/sqlite-vss-darwin-x64/lib/vss0.dylib

          cp ${{ env.ARTIFACT-MACOS-AARCH64-EXTENSION }}/vector0.dylib npm/sqlite-vss-darwin-arm64/lib/vector0.dylib
          cp ${{ env.ARTIFACT-MACOS-AARCH64-EXTENSION }}/vss0.dylib npm/sqlite-vss-darwin-arm64/lib/vss0.dylib
      - uses: actions/setup-node@v3
        with:
          node-version: "16"
          registry-url: "https://registry.npmjs.org"
      - name: Publish NPM sqlite-vss-linux-x64
        working-directory: npm/sqlite-vss-linux-x64
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish NPM sqlite-vss-darwin-x64
        working-directory: npm/sqlite-vss-darwin-x64
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish NPM sqlite-vss-darwin-arm64
        working-directory: npm/sqlite-vss-darwin-arm64
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish NPM sqlite-vss
        working-directory: npm/sqlite-vss
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  upload_pypi:
    needs:
      [
        build-linux-x86_64-python,
        build-macos-x86_64-python,
        build-macos-aarch64-python,
      ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT-LINUX-X86_64-WHEELS }}
          path: dist
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT-MACOS-X86_64-WHEELS }}
          path: dist
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT-MACOS-AARCH64-WHEELS }}
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
