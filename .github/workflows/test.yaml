name: "test build"
on:
  push:
    branches:
      - main
permissions:
  contents: read
jobs:
  build-linux_x86_64-extension:
    name: Building linux_x86_64
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
      - name: Cache sqlite build
        id: cache-sqlite-build
        uses: actions/cache@v3
        with:
          path: vendor/sqlite
          key: ${{ runner.os }}-${{ hashFiles('vendor/get_sqlite.sh') }}
      - if: steps.cache-sqlite-build.outputs.cache-hit != 'true'
        run: ./vendor/get_sqlite.sh
      - if: steps.cache-sqlite-build.outputs.cache-hit != 'true'
        working-directory: vendor/sqlite
        run: ./configure && make

      # TODO how cache this?
      - run: sudo apt-get install -y cmake libgomp1
      - run: make loadable
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sqlite-vss-linux_x86_64
          path: dist/debug/*
  build-linux_x86_64-python:
    runs-on: ubuntu-latest
    needs: [build-linux_x86_64-extension]
    steps:
      - uses: actions/checkout@v3
      - name: Download workflow artifacts
        uses: actions/download-artifact@v3
        with:
          name: sqlite-vss-linux_x86_64
          path: dist/debug/
      - uses: actions/setup-python@v3
      - run: pip install wheel
      - run: make python
      - run: make datasette
      - uses: actions/upload-artifact@v3
        with:
          name: sqlite-vss-linux_x86_64-wheels
          path: dist/debug/wheels/*.whl
  test-linux_x86_64:
    runs-on: ubuntu-latest
    needs: [build-linux_x86_64-extension, build-linux_x86_64-python]
    env:
      DENO_DIR: deno_cache
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: sqlite-vss-linux_x86_64
          path: dist/debug/
      - uses: actions/download-artifact@v3
        with:
          name: sqlite-vss-linux_x86_64-wheels
          path: dist/debug/
      - run: pip install --find-links dist/debug/ sqlite_vss
      - run: make test-loadable
      - run: make test-python
      # for test-npm
      - uses: actions/setup-node@v3
        with:
          cache: "npm"
          cache-dependency-path: npm/sqlite-vss/package.json
      - run: npm install
        working-directory: npm/sqlite-vss
      - run: cp dist/debug/vss0.so npm/sqlite-vss-linux-x64/lib
      - run: cp dist/debug/vector0.so npm/sqlite-vss-linux-x64/lib
      - run: make test-npm
      # for test-deno
      - uses: denoland/setup-deno@v1
        with:
          deno-version: v1.30
      - name: Cache Deno dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.DENO_DIR }}
          key: ${{ runner.os }}-${{ hashFiles('deno/deno.lock') }}
      - run: make test-deno
        env:
          DENO_SQLITE_VECTOR_PATH: ${{ github.workspace }}/dist/debug/vector0
          DENO_SQLITE_VSS_PATH: ${{ github.workspace }}/dist/debug/vss0
  build-macos_x86_64-extension:
    name: Building MacOS extension
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
      - name: Cache sqlite build
        id: cache-sqlite-build
        uses: actions/cache@v3
        with:
          path: vendor/sqlite
          key: ${{ runner.os }}-${{ hashFiles('vendor/get_sqlite.sh') }}
      - if: steps.cache-sqlite-build.outputs.cache-hit != 'true'
        run: ./vendor/get_sqlite.sh
      - if: steps.cache-sqlite-build.outputs.cache-hit != 'true'
        working-directory: vendor/sqlite
        run: ./configure && make
      - run: brew install llvm
      - name: Cache cmake build
        id: cache-cmake-build
        uses: actions/cache@v3
        with:
          path: build
          key: ${{ runner.os }}-build
      - run: make loadable
        env:
          # https://stackoverflow.com/questions/48825416/missing-openmp-c-flags-openmp-c-lib-names
          CC: /usr/local/opt/llvm/bin/clang
          CXX: /usr/local/opt/llvm/bin/clang++
          LDFLAGS: "-L/usr/local/opt/llvm/lib"
          CPPFLAGS: "-I/usr/local/opt/llvm/include"
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sqlite-vss-macos
          path: dist/debug/*
  build-macos_x86_64-python:
    runs-on: macos-latest
    needs: [build-macos_x86_64-extension]
    steps:
      - uses: actions/checkout@v3
      - name: Download workflow artifacts
        uses: actions/download-artifact@v3
        with:
          name: sqlite-vss-macos
          path: dist/debug/
      - uses: actions/setup-python@v3
      - run: pip install wheel
      - run: make python
      - run: make datasette
      - uses: actions/upload-artifact@v3
        with:
          name: sqlite-vss-macos-wheels
          path: dist/debug/wheels/*.whl
  test-macos_x86_64:
    runs-on: macos-latest
    needs: [build-macos_x86_64-extension, build-macos_x86_64-python]
    # can't get automated tests on macos to work yet :(
    if: false
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: sqlite-vss-macos
          path: dist/debug/
      - uses: actions/download-artifact@v3
        with:
          name: sqlite-vss-macos-wheels
          path: dist/debug/wheels
      #- run: brew install llvm
      - run: /usr/local/opt/python@3/libexec/bin/pip install --find-links dist/debug/wheels sqlite_vss
      - run: find dist
      #- run: make test-loadable python=/usr/local/opt/python@3/libexec/bin/python
      #- run: make test-python python=/usr/local/opt/python@3/libexec/bin/python
  build-macos-aarch64-extension:
    name: Building MacOS aarch64 extension
    runs-on: [self-hosted, mm1]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
      - name: Cache sqlite build
        id: cache-sqlite-build
        uses: actions/cache@v3
        with:
          path: vendor/sqlite
          key: ${{ runner.os }}-${{ hashFiles('vendor/get_sqlite.sh') }}
      - if: steps.cache-sqlite-build.outputs.cache-hit != 'true'
        run: ./vendor/get_sqlite.sh
      - if: steps.cache-sqlite-build.outputs.cache-hit != 'true'
        working-directory: vendor/sqlite
        run: ./configure && make
      - run: make loadable
        env:
          # https://stackoverflow.com/questions/48825416/missing-openmp-c-flags-openmp-c-lib-names
          CC: /opt/homebrew/opt/llvm/bin/clang
          CXX: /opt/homebrew/opt/llvm/bin/clang++
          LDFLAGS: "-L/opt/homebrew/opt/llvm/lib"
          CPPFLAGS: "-I/opt/homebrew/opt/llvm/include"
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sqlite-vss-macos-aarch64
          path: dist/debug/*
  build-windows-extension:
    runs-on: windows-2019
    if: false
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"
      - name: Cache sqlite build
        id: cache-sqlite-build
        uses: actions/cache@v3
        with:
          path: vendor/sqlite
          key: ${{ runner.os }}-${{ hashFiles('vendor/get_sqlite.sh') }}
      - if: steps.cache-sqlite-build.outputs.cache-hit != 'true'
        run: choco install wget --no-progress && ./vendor/get_sqlite.sh
        shell: bash
      - if: steps.cache-sqlite-build.outputs.cache-hit != 'true'
        working-directory: vendor\sqlite
        run: ./configure && make
      - run: make loadable
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sqlite-vss-windows
          path: dist/debug/*
